// Mocks generated by Mockito 5.0.17 from annotations
// in applore_assignment_app/test/modal/repository/product/product.repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:applore_assignment_app/modal/data_modal/data.modal.dart' as _i3;
import 'package:applore_assignment_app/modal/repository/product/product.repo.dart'
    as _i4;
import 'package:applore_assignment_app/modal/service/product/product.service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeProductService_0 extends _i1.Fake implements _i2.ProductService {}

class _FakeProduct_1 extends _i1.Fake implements _i3.Product {}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i4.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductService get productService =>
      (super.noSuchMethod(Invocation.getter(#productService),
          returnValue: _FakeProductService_0()) as _i2.ProductService);
  @override
  _i5.Future<_i3.Product> fetch(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetch, [id]),
              returnValue: Future<_i3.Product>.value(_FakeProduct_1()))
          as _i5.Future<_i3.Product>);
  @override
  _i5.Future<List<_i3.Product>> fetchList() =>
      (super.noSuchMethod(Invocation.method(#fetchList, []),
              returnValue: Future<List<_i3.Product>>.value(<_i3.Product>[]))
          as _i5.Future<List<_i3.Product>>);
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockProduct extends _i1.Mock implements _i3.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}
